---
# tasks file for nginx

- name: CER | CER, install python-setup-tools
  yum:
    name: "{{ package }}"
    state: latest
  vars:
    package:
    - python-pip
    - python-devel
    - gcc
    - python-setuptools

- name: CER | install pip
  pip:
    name: pip
    state: latest
    extra_args: --upgrade

- name: CER | CER, install docker-compose for python
  pip:
    name:
    - docker-compose

- name: CER | add port to allow for firewalld
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
  loop:
    - "{{ cer_port }}/tcp"


# - name: CER | Create a network
#   docker_network:
#     name: globalnetwork


#=====
- name: CER | delivery config files
  template:
    backup: true
    owner: root
    group: root
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: appsettings.override.json.j2, dest: "/opt/appsettings.override.json" }
    - { src: logging-nlog.override.json.j2, dest: "/opt/logging-nlog.override.json" }
    - { src: docker-compose.yml.j2, dest: "/opt/docker-compose.yml" }


#====
# - name: CER | Kibana, Delivery Docker-compose to a work Dir ("{{ kibana_work_dir }}/docker-compose.yml")
#   template:
#     backup: true
#     owner: root
#     group: root
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#   with_items:
#     - { src: docker-compose.yml.j2, dest: "{{ kibana_work_dir }}/docker-compose.yml" }

- name: CER | Run CER in Docker Container ("{{ kibana_work_dir }}")1
  command: "docker-compose -f /opt/docker-compose.yml up -d"

- name: CER | Check CER is running
  uri:
    url: http://127.0.0.1:{{ cer_port }}/api/server/info
    method: GET
  register: result
  until: result.status == 200
  retries: 60
  delay: 5
  tags:
    - health check