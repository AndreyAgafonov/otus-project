---
# tasks file for nginx

- name: KIBANA | Allow port {{ mongodb_port }} in firewalld
  firewalld:
    port: "{{ item }}/tcp"
    permanent: yes
    state: enabled
  loop:
    - "{{ elasticsearch_port_mgmt }}"
    - "{{ elasticsearch_port }}"
    - "{{ kibana_port }}"
    - "{{ logstash_bits_port }}"


- name: KIBANA | restart_firewalld
  systemd:
    name: firewalld
    enabled: yes
    state: restarted

- name: KIBANA | Install Kibana
  block:
  - name: KIBANA | elasticsearch, set value vm.max_map_count (For production mode required)
    sysctl:
      name: vm.max_map_count
      value: "{{ 262144 | string }}"
      sysctl_set: yes
      state: present
      reload: yes

  - name: KIBANA | elasticsearch, install python-setup-tools
    yum:
      name:
      - python-pip
      - python-devel
      - gcc
      - python-setuptools
      state: latest

  - name: KIBANA | install pip
    pip:
      name: pip
      state: latest
      extra_args: --upgrade

  - name: KIBANA | elasticsearch, install docker-compose for python
    pip:
      name:
      - docker-compose

  - name: KIBANA | Create a network
    docker_network:
      name: globalnetwork

  - name: KIBANA | elasticsearch, Create work directory for elasticsearch {{ elasticsearch_data }}
    file:
      path: "{{ item.path }}"
      state: directory
      owner: vagrant
      group: root
      mode: '0744'
    with_items:
      - { path: "{{ elasticsearch_data }}" }
      - { path: "{{ logstash_work_dir }}" }
      - { path: "{{ logstash_conf_dir }}" }
      - { path: "{{ logstash_data }}" }
      - { path: "{{ kibana_work_dir }}" }

#=====
  - name: KIBANA | logstash, deliveryt input,output and filter config for logstash {{ logstash_work_dir }}
    copy:
      backup: true
      owner: root
      group: root
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    with_items:
      - { src: files/input.conf.j2, dest: "{{ logstash_conf_dir }}/input.conf" }
      - { src: files/filter.conf.j2, dest: "{{ logstash_conf_dir }}/filter.conf" }
      - { src: files/output.conf.j2, dest: "{{ logstash_conf_dir }}/output.conf" }

#====
  - name: KIBANA | Kibana, Delivery Docker-compose to a work Dir ("{{ kibana_work_dir }}/docker-compose.yml")
    template:
      backup: true
      owner: root
      group: root
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    with_items:
      - { src: docker-compose.yml.j2, dest: "{{ kibana_work_dir }}/docker-compose.yml" }

  - name: KIBANA | Run Kibana in Docker Container ("{{ kibana_work_dir }}")1
    command: "docker-compose -f {{ kibana_work_dir }}/docker-compose.yml up -d"

  # - name: KIBANA | Run Kibana in Docker Container ("{{ kibana_work_dir }}")
  #   docker_compose:
  #     project_src: "{{ kibana_work_dir }}"
  #     build: yes
  #   #register: output
  #   tags:
  #     - docker-copmose
  # - name: KIBANA | add service to allow for firewalld
  #   firewalld:
  #     service: docker
  #     permanent: yes
  #     state: enabled

  # - name: KIBANA | add port to allow for firewalld
  #   firewalld:
  #     port: "{{ item }}"
  #     permanent: yes
  #     state: enabled
  #   loop:
  #     - "{{ elasticsearch_port_mgmt }}/tcp"
  #     - "{{ elasticsearch_port }}/tcp"
  #     - "{{ kibana_port }}/tcp"
  #     - "{{ logstash_bits_port }}/tcp"

  - name: KIBANA | Check container elasticsearch status (GET) ant return 200 code
    uri:
      url: http://127.0.0.1:{{ elasticsearch_port }}/_cat/health
      method: GET
    register: result
    until: result.status == 200
    retries: 60
    delay: 5
    tags:
      - health check

  - name: KIBANA | Check container kibana status (GET) ant return 200 code
    uri:
      url: http://127.0.0.1:{{ kibana_port }}
      method: GET
    register: result
    until: result.status == 200
    retries: 60
    delay: 5
    tags:
      - health check

  when: ansible_facts['distribution'] == 'CentOS'